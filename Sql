/* DATA ANALYSIS USING SQL PRACTICE QUERIES*/

/* 1) Get All Employees */
CREATE PROCEDURE spGetEmployees
As
BEGIN
Select JobTitle
From HumanResources.Employee
END

/* Aggregate Functions*/
/* 2) Calculate Sum or Order Details colomn*/
CREATE PROCEDURE spSumUnitPriceSalesOrderDetails
As
BEGIN
Select SUM(UnitPrice) as sum_all
From Sales.SalesOrderDetail
END

/* 3) Calculate Average or Order Details colomn*/
CREATE PROCEDURE spAvGUnitPriceSalesOrderDetails
As
BEGIN
Select Avg(UnitPrice) as Average
From Sales.SalesOrderDetail
END

/* 4) Calculate Standard Deviation for Order Details colomn*/
CREATE PROCEDURE spStandardDeviationUnitPriceSalesOrderDetails
As
BEGIN
Select  stdevp(UnitPrice) as Ave
From Sales.SalesOrderDetail
END

/* 5) Calculate Count for Order Details colomn*/
CREATE PROCEDURE spCountUnitPriceSalesOrderDetails
As
BEGIN
Select  count(UnitPrice) as count
From Sales.SalesOrderDetail
END

/* 6) Calculate Minimum for Order Details colomn*/
CREATE PROCEDURE spMinimumUnitPriceOrderDetails
As
BEGIN
Select  MIN(UnitPrice) as Min
From Sales.SalesOrderDetail
END

/* 7) Calculate Maximum for Order Details colomn*/
CREATE PROCEDURE spMaximumUnitPriceOrderDetails
As
BEGIN
Select  Max(UnitPrice) as Max
From Sales.SalesOrderDetail
END

/* 8) Calculate Maximum & Minimum value for Order Details colomn*/
CREATE PROCEDURE spMinimumMaximumUnitPriceTogetherOrderDetails
As
BEGIN
Select  Max(UnitPrice) As Minimum, Min(UnitPrice) As Maximum
From Sales.SalesOrderDetail
END

/* Slicing Data*/
/* 9 Select Name where country region equals to US */
CREATE PROCEDURE spGetNameAllWhereTerritoryRegionCodeUS
As
BEGIN
Select Name
From Sales.SalesTerritory
WHERE CountryRegionCode = 'US';
END

/* 10 Select Name where Territories by region code & Sales */
CREATE PROCEDURE SalesTerritoryNameByRegionCodeAndSales
As
BEGIN
Select Name
From Sales.SalesTerritory
WHERE CountryRegionCode = 'US' and SalesYTD > 100000;
END

/* 11 Select Name where Territories by region code & Sales */

CREATE PROCEDURE SalesTerritoryNameSalesYTD
As
BEGIN
Select Name
From Sales.SalesTerritory
WHERE SalesYTD >= 100000  and SalesYTD > 3805202;
END


/* 12 Select Name where Territories by region code & Sales */

CREATE PROCEDURE SalesTerritoryNamesbyRange
As
BEGIN
Select Name
From Sales.SalesTerritory
WHERE SalesYTD >= 100000  and SalesYTD > 3805202;
END

/* Limiting Data */

/* 13 Sales Territory top 5 rows */

CREATE PROCEDURE SalesTerritoryTop5rows
As
BEGIN
Select Top 5 *
From Sales.SalesTerritory
END


/* Sorting Data */
/* 14 Last year sales by Sales Terittory */

CREATE PROCEDURE SalesTerritorybysaleslastyear
As
BEGIN
Select *
From Sales.SalesTerritory
Order BY SalesLastYear
END



/* Filtering Patterns */
/* 15 Fltering by name */
CREATE PROCEDURE SalesTaxRate
As
BEGIN
Select *
From Sales.SalesTaxRate
Where Name like '%GST';
END

/* 16 Fltering by name */
CREATE PROCEDURE SalesTaxRateName
As
BEGIN
Select *
From Sales.SalesTaxRate
Where Name like '_a%'
Order By Name;
END

/* 17 Fltering by name */
CREATE PROCEDURE spCountAggregate
As
BEGIN
Select COUNT(*), Name
From Person.CountryRegion
Group By Name;
END

/* 18 Replace the column data  */
CREATE PROCEDURE SpGroupName
BEGIN
SELECT JobTitle,
Replace(JobTitle, 'Buyer', 'Buyers')
From dbo.AllEmployees
END

/* 19 Or Query  */

CREATE PROCEDURE SpGroupName
As
BEGIN
Select DepartmentID
From HumanResources.Department
Where Name = 'Engineering' OR Name = 'Sales';
END

/* 20 AND Query  */

CREATE PROCEDURE SpANDQuery
As
BEGIN
Select Top 5 DepartmentID
From HumanResources.Department
Where Name = 'Engineering' AND GroupName = 'Research and Development';
END

/* 21 NOT Query  */
CREATE PROCEDURE SpNOTQuery
As
BEGIN
Select DepartmentID, GroupName
From HumanResources.Department
Where NOT Name = 'Engineering' 
END

/* 22 AndOrtogther Query  */
CREATE PROCEDURE SpAnd_OrTogetherQuery
As
BEGIN
Select DepartmentID
From HumanResources.Department
Where Name = 'Engineering'  AND (GroupName = 'Research and Development' OR GroupName =  'Manufacturing');
END

/* 23 AndWithNot Query  */
CREATE PROCEDURE SpAnd_WithNotQuery
As
BEGIN
Select DepartmentID
From HumanResources.Department
Where NOT Name= 'Sales' AND NOT Name = 'Marketing';
END

/* 24 Upper Function */
CREATE PROCEDURE SpUpperFunction
As
BEGIN
Select UPPER(JobTitle) as Job
From HumanResources.Employee
Order by BusinessEntityID asc;
END

/* 25 Distinct Function */
CREATE PROCEDURE SpDictinct
As
BEGIN
Select Distinct JobTitle as Job
From HumanResources.Employee
END

/* 26 Sunstring Function */
CREATE PROCEDURE SpSubstringFunction
As
BEGIN
Select SUBSTRING(JobTitle,1,3) as Job
From HumanResources.Employee
END

/* 27 RTRIM Function */
CREATE PROCEDURE SpRTRIMFunction
As
BEGIN
Select RTRIM(JobTitle)
From HumanResources.Employee
END

/* 28 LTRIM Function */
CREATE PROCEDURE SpLTRIMFunction
As
BEGIN
Select LTRIM(JobTitle)
From HumanResources.Employee
END

/* 29 Concat Column */
CREATE PROCEDURE spConcatcolumn
As
BEGIN
Select CONCAT(JobTitle,' ',NationalIDNumber)
From HumanResources.Employee
END

/* 30 length Function */
CREATE PROCEDURE spCount
As
BEGIN
Select JobTitle, COUNT(*)
From HumanResources.Employee
where VacationHours > 10
Group By JobTitle
Having COUNT(*) > 2;
END

